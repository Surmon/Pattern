/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.surmon.pattern.detector;

import java.awt.BorderLayout;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.Lookups;
import org.surmon.pattern.api.PatternData;
import org.surmon.pattern.api.utils.ImageConverter;
import processing.core.PApplet;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.surmon.pattern.detector//PatternDetectorTopComponent//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "PatternDetectorTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "org.surmon.pattern.detector.PatternDetectorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_PatternDetectorTopComponentAction",
        preferredID = "PatternDetectorTopComponent"
)
@Messages({
    "CTL_PatternDetectorTopComponentAction=PatternDetector",
    "CTL_PatternDetectorTopComponent=PatternDetector Window",
    "HINT_PatternDetectorTopComponent=This is a PatternDetector window"
})
public final class PatternDetectorTopComponent extends TopComponent {
    
    private HoughCircleDetector detector = new HoughCircleDetector();
    
    public PatternDetectorTopComponent() {
        //initComponents();
        setName(Bundle.CTL_PatternDetectorTopComponent());
        setToolTipText(Bundle.HINT_PatternDetectorTopComponent());
        putClientProperty(TopComponent.PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN, Boolean.TRUE);
        PatternData data = getLookup().lookup(PatternData.class);
        
        //sigmaText.setText(String.valueOf(detector.getSigma()));
        //ksizeText.setText(String.valueOf(detector.getKsize()));
        
        setLayout(new BorderLayout());
        
        associateLookup(Lookups.singleton(detector));       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sigmaSlider = new javax.swing.JSlider();
        sigmaText = new javax.swing.JTextField();
        ksizeSlider = new javax.swing.JSlider();
        ksizeText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        sigmaSlider.setMaximum(25);
        sigmaSlider.setMinimum(5);
        sigmaSlider.setValue(15);
        sigmaSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sigmaSliderStateChanged(evt);
            }
        });

        ksizeSlider.setMaximum(4);
        ksizeSlider.setMinimum(1);
        ksizeSlider.setExtent(2);
        ksizeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ksizeSliderStateChanged(evt);
            }
        });

        ksizeText.setText("");

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(PatternDetectorTopComponent.class, "PatternDetectorTopComponent.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(PatternDetectorTopComponent.class, "PatternDetectorTopComponent.jLabel2.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sigmaSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                    .addComponent(ksizeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ksizeText, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(sigmaText, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sigmaText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sigmaSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(ksizeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ksizeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(222, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void sigmaSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sigmaSliderStateChanged
        double sigma = (double) sigmaSlider.getValue() / 10.0;
        detector.setSigma(sigma);
        sigmaText.setText(String.valueOf(sigma));
    }//GEN-LAST:event_sigmaSliderStateChanged

    private void ksizeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ksizeSliderStateChanged
        int ksize = ksizeSlider.getValue() * 2 + 1;
        detector.setKsize(ksize);
        ksizeText.setText(String.valueOf(ksize));
    }//GEN-LAST:event_ksizeSliderStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSlider ksizeSlider;
    private javax.swing.JTextField ksizeText;
    private javax.swing.JSlider sigmaSlider;
    private javax.swing.JTextField sigmaText;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}

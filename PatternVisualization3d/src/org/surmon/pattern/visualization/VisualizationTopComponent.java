/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.surmon.pattern.visualization;

import org.surmon.pattern.visualization.d3.VisualizationCanvas3D;
import com.jogamp.opengl.util.FPSAnimator;
import java.awt.BorderLayout;
import java.util.Collection;
import java.util.logging.Logger;
import javax.media.opengl.GLContext;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.surmon.pattern.api.PatternData;
import org.surmon.pattern.visualization.d3.VisualizationToolbar3D;
import org.surmon.pattern.visualization.d3.tf.TransferFunction;

/**
 * Top component which displays 3D visualization of pattern data.
 */
@ConvertAsProperties(
        dtd = "-//cz.pattern.visualization//Visualization//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "VisualizationTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "cz.pattern.visualization.VisualizationTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_VisualizationAction",
        preferredID = "VisualizationTopComponent"
)
@Messages({
    "CTL_VisualizationAction=Visualization",
    "CTL_VisualizationTopComponent=Visualization Window",
    "HINT_VisualizationTopComponent=This is a Visualization window"
})
public final class VisualizationTopComponent extends TopComponent implements LookupListener {
    
    /**
     * Tag used for logging.
     */
    public static final String TAG = "VisualizationTC";

    private VisualizationToolbar3D toolbar;
    private VisualizationCanvas3D canvas;

    private TransferFunction tf;
    private Lookup.Result<TransferFunction> tfResult = null;

    public VisualizationTopComponent() {
        initComponents();
        setName(Bundle.CTL_VisualizationTopComponent());
        setToolTipText(Bundle.HINT_VisualizationTopComponent());
        putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);

        canvas = new VisualizationCanvas3D();
        toolbar = new VisualizationToolbar3D(canvas);

        add(toolbar, BorderLayout.NORTH);
        add(canvas, BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    @Override
    public void componentOpened() {
        // look for the transfer function
        tfResult = Utilities.actionsGlobalContext().lookupResult(TransferFunction.class);
        tfResult.addLookupListener(this);
        
        canvas.start();
    }

    @Override
    public void componentClosed() {
        canvas.stop();
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
    }

    @Override
    public void resultChanged(LookupEvent event) {
        // this is performed when lookup is changed
        Collection<? extends TransferFunction> tfs = tfResult.allInstances();
        if (!tfs.isEmpty()) {
            tf = tfs.iterator().next();
            if(tf != null){
                Logger.getLogger(TAG).info("Setting transfer function!");
                canvas.setTransferFuntion(tf);
            }else{
                Logger.getLogger(TAG).warning("Transfer function couldn't be set beacause is null.");
            }
        }
    }

    /**
     * Sets Pattern data.
     *
     * @param data
     */
    public void setData(PatternData data) {
        canvas.stop();
        Logger.getLogger(TAG).info("Setting image ...");
        canvas.setImage(data);
        Logger.getLogger(TAG).info("Image set.");
        canvas.start();
    }
}

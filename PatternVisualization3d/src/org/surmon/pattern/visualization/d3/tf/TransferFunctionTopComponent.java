/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.surmon.pattern.visualization.d3.tf;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Collection;
import java.util.Collections;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JSpinner;
import javax.swing.JToolBar;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;

/**
 * Top component which displays Transfer function control panel.
 */
@ConvertAsProperties(
        dtd = "-//org.surmon.pattern.visualization.d3.tf//TransferFunction//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "TransferFunctionTopComponent",
        iconBase = "org/surmon/pattern/visualization/d3/tf/function_16.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.surmon.pattern.visualization.d3.tf.TransferFunctionTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_TransferFunctionAction",
        preferredID = "TransferFunctionTopComponent"
)
@Messages({
    "CTL_TransferFunctionAction=TransferFunction",
    "CTL_TransferFunctionTopComponent=TransferFunction Window",
    "HINT_TransferFunctionTopComponent=This is a TransferFunction window"
})
public final class TransferFunctionTopComponent extends TopComponent {
    
    private TransferFunction tf = new TransferFunction();
    private InstanceContent content = new InstanceContent();
    private JToolBar toolBar = new JToolBar();
    
    public TransferFunctionTopComponent() {
        initComponents();
        setName(Bundle.CTL_TransferFunctionTopComponent());
        setToolTipText(Bundle.HINT_TransferFunctionTopComponent());
        
        associateLookup(new AbstractLookup(content));
        
        toolBar.setOrientation(JToolBar.HORIZONTAL);
        toolBar.setFloatable(false);
        
        JButton applyButton =  new JButton("Apply");
        applyButton.setIcon(new ImageIcon("images/activate_16.png"));
        applyButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                content.set(Collections.singleton(tf), null);
            }
        });
        
        
        toolBar.add(applyButton);
        add(toolBar, BorderLayout.NORTH);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        
    }

    @Override
    public void componentClosed() {
       
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
    }
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.surmon.pattern.explorer;

import java.beans.IntrospectionException;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.surmon.pattern.api.PatternData;
import org.surmon.pattern.project.api.Project;
import org.surmon.pattern.project.api.WorkspaceController;
import org.surmon.pattern.project.api.WorkspaceListener;

/**
 * Top component which displays pattern data tree.
 */
@ConvertAsProperties(
        dtd = "-//org.surmon.pattern.explorer//PatternExplorer//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "PatternExplorerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "org.surmon.pattern.explorer.PatternExplorerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_PatternExplorerAction",
        preferredID = "PatternExplorerTopComponent"
)
@Messages({
    "CTL_PatternExplorerAction=PatternExplorer",
    "CTL_PatternExplorerTopComponent=PatternExplorer",
    "HINT_PatternExplorerTopComponent=Pattern explorer window displaying recently opened pattern files."
})
public final class PatternExplorerTopComponent extends TopComponent implements ExplorerManager.Provider, WorkspaceListener {

    private WorkspaceController controller;
    private final ExplorerManager mgr = new ExplorerManager();

    public PatternExplorerTopComponent() {
        initComponents();
        setName(Bundle.CTL_PatternExplorerTopComponent());
        setToolTipText(Bundle.HINT_PatternExplorerTopComponent());
        associateLookup(ExplorerUtils.createLookup(mgr, getActionMap()));
        mgr.setRootContext(new AbstractNode(new PatternObjectChildren()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        treeView = new BeanTreeView();

        setLayout(new java.awt.BorderLayout());
        add(treeView, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane treeView;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        controller = Lookup.getDefault().lookup(WorkspaceController.class);
        controller.addWorkspaceListener(this);
        initNodes();
    }

    private void initNodes() {
        for (Project project : controller.getProjects()) {
            PatternData data = project.getLookup().lookup(PatternData.class);
            if (data != null) {
                try {
                    PatternDataNode node = new PatternDataNode(data);
                    getExplorerManager().getRootContext().getChildren().add(new PatternDataNode[]{node});
                } catch (IntrospectionException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }
    }

    @Override
    public void componentClosed() {
        controller.removeWorkspaceListener(this);
    }

    void writeProperties(java.util.Properties p) {
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return mgr;
    }

    @Override
    public void workspaceChanged() {
        initNodes();
    }
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.surmon.pattern.projectexplorer;

import java.beans.IntrospectionException;
import java.util.List;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Node;
import org.openide.util.*;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.surmon.pattern.project.api.*;
import org.surmon.pattern.project.spi.ProjectExplorer;

/**
 * Top component which list of imported projects.
 */
@ConvertAsProperties(
        dtd = "-//org.surmon.pattern.projectviewer//ProjectViewer//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ProjectViewerTopComponent",
        iconBase = "org/surmon/pattern/projectviewer/resources/stack_explorer_16.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "org.surmon.pattern.projectviewer.ProjectViewerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ProjectViewerAction",
        preferredID = "ProjectViewerTopComponent"
)
@Messages({
    "CTL_ProjectViewerAction=Projects",
    "CTL_ProjectViewerTopComponent=Projects",
    "HINT_ProjectViewerTopComponent=Displays list of imported projects."
})
public final class ProjectViewerTopComponent extends TopComponent implements ExplorerManager.Provider, WorkspaceListener, LookupListener, ProjectExplorer {
    
    private WorkspaceController controller;
    private final ExplorerManager mgr = new ExplorerManager();

    public ProjectViewerTopComponent() {
        initComponents();
        setName(Bundle.CTL_ProjectViewerTopComponent());
        setToolTipText(Bundle.HINT_ProjectViewerTopComponent());

        associateLookup(ExplorerUtils.createLookup(mgr, getActionMap()));
        mgr.setRootContext(new WorkspaceNode());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        treeView = new BeanTreeView();

        setLayout(new java.awt.BorderLayout());
        add(treeView, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane treeView;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        controller = Lookup.getDefault().lookup(WorkspaceController.class);
        controller.addWorkspaceListener(this);
        nodesChanged();
    }

    @Override
    public void componentClosed() {
        controller.removeWorkspaceListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return mgr;
    }

    @Override
    public void workspaceChanged() {
        nodesChanged();
    }

    private void addProjectNode(Project project) {
        try {
            ProjectNode node = new ProjectNode(project);
            getExplorerManager().getRootContext().getChildren().add(new ProjectNode[]{node});
        } catch (IntrospectionException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    private void nodesChanged() {
        List<Node> nodes = getExplorerManager().getRootContext().getChildren().snapshot();
        List<Project> projects = controller.getProjects();

        if (projects != null) {
            for (Project project : projects) {
                if (!contains(nodes, project)) {
                    addProjectNode(project);
                }
            }
        }

    }

    private boolean contains(List<Node> nodes, Project project) {
        for (Node node : nodes) {
            if (node.getLookup().lookup(Project.class).equals(project)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
